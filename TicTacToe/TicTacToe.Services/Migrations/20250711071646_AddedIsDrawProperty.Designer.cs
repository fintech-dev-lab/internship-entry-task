// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicTacToe.Services.Repository;

#nullable disable

namespace TicTacToe.Services.Migrations
{
    [DbContext(typeof(TicTacToeContext))]
    [Migration("20250711071646_AddedIsDrawProperty")]
    partial class AddedIsDrawProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicTacToe.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FirstPlayerUuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDraw")
                        .HasColumnType("bit");

                    b.Property<Guid>("SecondPlayerUuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WinnerUuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Uuid");

                    b.HasIndex("FirstPlayerUuid");

                    b.HasIndex("SecondPlayerUuid");

                    b.HasIndex("WinnerUuid");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TicTacToe.Core.Entities.Move", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<Guid>("GameUuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerUuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Uuid");

                    b.HasIndex("GameUuid");

                    b.HasIndex("PlayerUuid");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("TicTacToe.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uuid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicTacToe.Core.Entities.Game", b =>
                {
                    b.HasOne("TicTacToe.Core.Entities.User", "FirstPlayer")
                        .WithMany()
                        .HasForeignKey("FirstPlayerUuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicTacToe.Core.Entities.User", "SecondPlayer")
                        .WithMany()
                        .HasForeignKey("SecondPlayerUuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicTacToe.Core.Entities.User", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerUuid");

                    b.Navigation("FirstPlayer");

                    b.Navigation("SecondPlayer");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TicTacToe.Core.Entities.Move", b =>
                {
                    b.HasOne("TicTacToe.Core.Entities.Game", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToe.Core.Entities.User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TicTacToe.Core.Entities.Game", b =>
                {
                    b.Navigation("Moves");
                });
#pragma warning restore 612, 618
        }
    }
}
